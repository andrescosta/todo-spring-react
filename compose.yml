version: "3.8"

x-keycloakdb-variables: &keycloakdb-variables
  KC_DB_USERNAME: keycloak
  KC_DB_PASSWORD: keycloak123
  KC_DB_URL_DATABASE: keycloak

networks:
  backend:
    name: app
    driver: bridge
volumes:
  postgres_data:
    driver: local
  grafana_data:
    driver: local
  tempo-data:
    driver: local
services:
  nginx:
    image: coeux/rproxy:latest
    build: ./nginx
    ports:
      - "8080:8080"
      - "3000:3000"
      - "8282:8282"
    networks:
      - backend
    depends_on:
      - todo-web
      - todosvc 
  pyroscope:
    image: pyroscope/pyroscope:latest
    environment:
      - PYROSCOPE_LOG_LEVEL=error
    ports:
      - "4040:4040"
    command:
      - "server"
      #- "-no-self-profiling"
    networks:
      - backend
  todo-web:
    image: coeux/todo-web:latest
    build: ./todo-web
    ports:
      - "3001:3001"
    networks:
      - backend
    depends_on:
      - postgres-db
      - keycloak
      - todosvc
    healthcheck:
      test: curl -f http://localhost:3000/ || exit 1
      interval: 1m
      timeout: 10s
      retries: 2
  todosvc:
    image: coeux/todo:latest
    build: ./todo-svc
    ports:
      - "8585:8585"
    environment:
      - SPRING_PROFILES_ACTIVE=devdocker
      - PYROSCOPE_APPLICATION_NAME=todo-svc-docker
      - PYROSCOPE_FORMAT=jfr
      - PYROSCOPE_PROFILING_INTERVAL=10ms
      - PYROSCOPE_PROFILER_EVENT=itimer
      - PYROSCOPE_PROFILER_LOCK=1
      - PYROSCOPE_PROFILER_ALLOC=100k
      - PYROSCOPE_UPLOAD_INTERVAL=10s
      - PYROSCOPE_LOG_LEVEL=error
      - PYROSCOPE_SERVER_ADDRESS=http://pyroscope:4040
    networks:
      - backend
    depends_on:
      - postgres-db
      - keycloak
      - loki
      - tempo
      - pyroscope
    healthcheck:
      test: curl -f http://localhost:8080/activities || exit 1
      interval: 1m
      timeout: 10s
      retries: 2
  postgres-db:
    image: postgres:15
    restart: always
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./provisioning/todo-db:/docker-entrypoint-initdb.d/
    networks:
      - backend
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: mysecretpassword
      APP_DB_USER: todo_user
      APP_DB_PASS: mysecretpassword
      APP_DB_NAME: todo
      <<: *keycloakdb-variables
      PGDATA: /var/lib/postgresql/data/pgdata
    healthcheck:
      test: pg_isready -U postgres
      interval: 1m
      timeout: 10s
      retries: 2
  keycloak:
    image: quay.io/keycloak/keycloak:latest
    volumes:
      - ./provisioning/keycloak/data:/opt/keycloak/data/import
    environment:
      PROXY_ADDRESS_FORWARDING: 'true'
      KC_DB: postgres
      KC_DB_URL_HOST: postgres-db
      KC_DB_URL_PORT: 5432
      KC_DB_SCHEMA: public
      <<: *keycloakdb-variables
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KEYCLOAK_FRONTEND_URL: http://localhost:8282/auth
    command:
      - start-dev
      - --import-realm
      - --metrics-enabled=true
    ports:
      - "8282:8080"
    networks:
      - backend
    depends_on:
      - postgres-db
  prometheus:
    image: prom/prometheus
    command:
      - --enable-feature=exemplar-storage
      - --config.file=/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    volumes:
      - ./provisioning/prometheus/data/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - backend
    depends_on:
      - todosvc
  grafana:
    image: grafana/grafana
    ports:
      - "3030:3000"
    networks:
      - backend
    volumes:
      - grafana_data:/var/lib/grafana
      - ./provisioning/grafana/provisioning/:/etc/grafana/provisioning/
    environment:
      - GF_INSTALL_PLUGINS=https://github.com/pyroscope-io/grafana-panel-plugin/releases/download/v1.4.2/pyroscope-panel-1.4.2.zip;pyroscope-panel,https://github.com/pyroscope-io/grafana-datasource-plugin/releases/download/v1.2.0/pyroscope-datasource-1.2.0.zip;pyroscope-datasource
    depends_on:
      - prometheus
  postgres-exporter:
    image: quay.io/prometheuscommunity/postgres-exporter
    ports:
      - "9187:9187"
    environment:
      - DATA_SOURCE_NAME=postgresql://postgres:mysecretpassword@postgres-db:5432/postgres?sslmode=disable
    depends_on:
      - postgres-db
    networks:
      - backend
  tempo:
    image: grafana/tempo
    command: [ "-config.file=/etc/tempo.yaml" ]
    volumes:
      - ./provisioning/tempo/tempo-local.yaml:/etc/tempo.yaml:ro
      - ./tempo-data:/tmp/tempo
    ports:
      - "14268"
      - "9411:9411"
    networks:
      - backend
  loki:
    image: grafana/loki
    command: [ "-config.file=/etc/loki-local-config.yaml" ]
    ports:
      - "3100:3100"                       
    volumes:
      - ./provisioning/loki/loki-local-config.yaml:/etc/loki-local-config.yaml:ro
    environment:
      - JAEGER_AGENT_HOST=tempo
      - JAEGER_ENDPOINT=http://tempo:14268/api/traces
      - JAEGER_SAMPLER_TYPE=const
      - JAEGER_SAMPLER_PARAM=1
    networks:
      - backend